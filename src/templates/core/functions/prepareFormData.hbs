const prepareFormData = (formData: any) => {
    if (!isDefined(formData)) {
        return undefined;
    }
    if (isStandardBrowserEnv) {
        return formData;
    }
    if (!isFormData(formData)) {
        return formData;
    }
    const escape = (str: string, filename = false) =>
        (filename ? str : str.replace(/\r?\n|\r/g, '\r\n'))
        .replace(/\n/g, '%0A')
        .replace(/\r/g, '%0D')
        .replace(/"/g, '%22');

    const boundary = 'formdata' + new ObjectId().toHexString();
    const chunks: any[] = [];
    const prefix = `--${boundary}\r\nContent-Disposition: form-data; name="`;

    for (let [name, value] of formData) {
        if (isStringWithValue(value)) {
            chunks.push(prefix + escape(name) + `"\r\n\r\n${value.replace(/\r\n?/g, '\n').replace(/\n/g,'\r\n')}\r\n`);
        } else {
            chunks.push(prefix + escape(name) + `"; filename="${escape(value.name, true)}"\r\n` + `Content-Type: ${value.type || 'application/octet-stream'}\r\n\r\n`, value, '\r\n');
        }
    }

    chunks.push(`--${boundary}--`, '\r\n');

    return new Blob(chunks, {
        type: 'multipart/form-data; boundary=' + boundary,
    });
};
